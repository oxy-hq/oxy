name: Create build cache
on:
  schedule:
    - cron: "0 0 * * 0" # midnight sunday
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "11.0"

jobs:
  compile-to-save-cache:
    name: Compile onyx binary to save cache on main branch
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            cross-compilation: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross-compilation: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross-compilation: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #-- Build frontend
      - name: Install Node.js
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
            pnpm-store-${{ matrix.job.os }}-
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-
            turbo-${{ matrix.job.os }}-
      - name: Build web-app static assets
        run: |
          pnpm install
          pnpm -C web-app build

      #-- Build core binary
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-${{ matrix.job.os }}-${{ matrix.job.target }}
      - name: Update Rust Toolchain Target
        run: |
          echo "targets = ['${{matrix.job.target}}']" >> rust-toolchain.toml
      - name: Install cross
        if: matrix.job.cross-compilation
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Cargo build
        shell: bash
        run: |
          if [[ "${{ matrix.job.cross-compilation }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi
