name: Public Nightly Build

on:
  schedule:
    - cron: "0 8 * * *" # Runs every day at midnight Bay Area time (UTC-8)
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "11.0"

defaults:
  run:
    shell: bash

permissions:
  contents: write
  actions: read
  packages: write

jobs:
  build-nightly:
    # we dont build nightly release from internal repo
    # but allowing adhoc build for cache purposes
    if: github.repository == 'oxy-hq/oxy'
    name: Build Nightly CLI for ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
    steps:
      - uses: actions/create-github-app-token@v2
        name: Create GitHub App Token
        id: app-token
        with:
          app-id: ${{ vars.ARGO_APP_ID }}
          private-key: ${{ secrets.ARGO_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            oxy
            oxy-internal
            oxy-nightly

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Create artifacts folder
        run: mkdir -p artifacts

      - uses: rui314/setup-mold@v1
        if: runner.os == 'Linux'
        with:
          make-default: true

      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-cli-${{ matrix.job.os }}-${{ matrix.job.target }}
          cache-all-crates: "true"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ steps.app-token.outputs.token }}

      # cleanup disk space
      - name: Free Disk Space (Ubuntu)
        if: ${{ startsWith(matrix.job.os, 'ubuntu') }}
        uses: jlumbroso/free-disk-space@main

      #-- Prep node
      - name: Prep Node
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
      - name: Install dependencies & Build web-app
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: |
          pnpm install --prefer-frozen-lockfile
          pnpm -C web-app build

      - name: Build oxy cli
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.job.target }}
          mv target/${{ matrix.job.target }}/release/oxy artifacts/oxy-${{ matrix.job.target }}

      - name: Generate config schema (once)
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          cargo run --release --target ${{ matrix.job.target }} -- gen-config-schema
          cp -a json-schemas/. artifacts/
          cp Cargo.lock artifacts/

      - name: Get current date
        id: date
        run: echo "current_date=$(date -u +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Publish nightly release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          draft: false
          repository: oxy-hq/oxy-nightly
          prerelease: false
          make_latest: true
          tag_name: nightly-${{ github.sha }}
          name: Nightly Build ${{ steps.date.outputs.current_date }}
          files: artifacts/**/*
          body: |
            Nightly build triggered at ${{ steps.date.outputs.current_date }}. Please use with caution.
            Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            To install the latest release:
            `bash <(curl --proto '=https' --tlsv1.2 -LsSf https://nightly.oxy.tech)`

  build-and-publish-docker:
    if: github.repository == 'oxy-hq/oxy'
    concurrency:
      group: docker-publish-nightly-${{ matrix.arch }}
      cancel-in-progress: true
    runs-on: ${{ matrix.arch == 'linux/amd64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    strategy:
      fail-fast: true
      matrix:
        arch: [linux/amd64, linux/arm64]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - uses: actions/create-github-app-token@v2
        name: Create GitHub App Token
        id: app-token
        with:
          app-id: ${{ vars.ARGO_APP_ID }}
          private-key: ${{ secrets.ARGO_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            oxy
            oxy-internal
            oxy-nightly

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: echo "current_date=$(date -u +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: short_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.arch }} image
        run: |
          DATE_TAG=${{ steps.date.outputs.current_date }}
          SHA_TAG=${{ steps.short_sha.outputs.short_sha }}
          ARCH_TAG=$(echo "${{ matrix.arch }}" | awk -F'/' '{print $2}')
          docker build -t ghcr.io/${{ github.repository_owner }}/oxy:nightly-$DATE_TAG-$ARCH_TAG .
          docker push ghcr.io/${{ github.repository_owner }}/oxy:nightly-$DATE_TAG-$ARCH_TAG
          docker build -t ghcr.io/${{ github.repository_owner }}/oxy:nightly-$SHA_TAG-$ARCH_TAG .
          docker push ghcr.io/${{ github.repository_owner }}/oxy:nightly-$SHA_TAG-$ARCH_TAG
          docker build -t ghcr.io/${{ github.repository_owner }}/oxy:nightly-latest-$ARCH_TAG .
          docker push ghcr.io/${{ github.repository_owner }}/oxy:nightly-latest-$ARCH_TAG

  create-and-push-nightly-manifest:
    if: github.repository == 'oxy-hq/oxy'
    needs: build-and-publish-docker
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get current date
        id: date
        run: echo "current_date=$(date -u +'%Y%m%d')" >> $GITHUB_OUTPUT
      - name: Create and push multi-arch manifest
        run: |
          docker manifest create ghcr.io/${{ github.repository_owner }}/oxy:nightly-${{ steps.date.outputs.current_date }} \
            ghcr.io/${{ github.repository_owner }}/oxy:nightly-${{ steps.date.outputs.current_date }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/oxy:nightly-${{ steps.date.outputs.current_date }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/oxy:nightly-${{ steps.date.outputs.current_date }}
          docker manifest create ghcr.io/${{ github.repository_owner }}/oxy:nightly-latest \
            ghcr.io/${{ github.repository_owner }}/oxy:nightly-latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/oxy:nightly-latest-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/oxy:nightly-latest
