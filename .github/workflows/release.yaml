name: Release
on:
  workflow_dispatch:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  schedule:
    - cron: "0 0 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  changesets:
    uses: ./.github/workflows/changesets.yaml
  compile:
    concurrency:
      group: onyx-compile-${{ github.ref_name }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Releasing binary version ${{ github.ref_name }} for target ${{ matrix.job.target }}
    needs: [changesets]
    if: needs.changesets.outputs.onyx == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    #TODO: use third party runners to support building arm binaries natively
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            cross-compilation: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross-compilation: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross-compilation: false
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   cross-compilation: false
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
        #   cross-compilation: false
        # - os: ubuntu-latest
        #   target: x86_64-unknown-linux-musl
        #   cross-compilation: true
        # - os: ubuntu-latest
        #   target: i686-unknown-linux-gnu
        #   cross-compilation: true
        # - os: ubuntu-latest
        #   target: arm-unknown-linux-gnueabihf
        #   cross-compilation: true
        # - os: ubuntu-latest
        #   target: aarch64-unknown-linux-gnu
        #   cross-compilation: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prep Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: "" # temporarily override "-D warnings"
          target: ${{ matrix.job.target }}
          cache-key: release-${{ matrix.job.os }}-${{ matrix.job.target }}
      - name: Update Rust Toolchain Target
        run: |
          echo "targets = ['${{matrix.job.target}}']" >> rust-toolchain.toml
      - name: Install cross
        if: matrix.job.cross-compilation
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Install Node.js
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
            pnpm-store-${{ matrix.job.os }}-
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-
            turbo-${{ matrix.job.os }}-
      - name: Build
        shell: bash
        run: |
          pnpm -C web-app build
      - name: Install required dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.job.os }}" =~ "ubuntu" ]]; then
            sudo apt-get update
            sudo apt-get install -y pkg-config libssl-dev
          fi
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install windows required dependencies
        if: matrix.job.os == 'windows-latest'
        run: |
          echo "Installing windows required dependencies"
          # remove ./dist symlink and replace with windows compatible alternative
          Remove-Item -Recurse -Force dist
          Copy-Item -Recurse web-app/dist dist
      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 14.0
        shell: bash
        run: |
          if [[ "${{ matrix.job.cross-compilation }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi
          mv target/${{ matrix.job.target }}/release/onyx onyx-${{ matrix.job.target }}
      - name: Generate release tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" =~ "refs/tags/" ]]; then
            echo "::set-output name=release_tag::${{ github.ref_name }}"
          else
            echo "::set-output name=release_tag::NightlyBuild_$(date +"%Y.%m.%d.run_${{ github.run_number }}")"
          fi
      - name: Private github release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            onyx-${{ matrix.job.target }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
  release_publicly:
    runs-on: ubuntu-latest
    needs: [compile]
    steps:
    - uses: actions/create-github-app-token@v1
      name: Create GitHub App Token
      id: app-token
      with:
        app-id: ${{ vars.ARGO_APP_ID }}
        private-key: ${{ secrets.ARGO_APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        repositories: |
          onyx-public-releases
          onyx
    - name: Checkout Public Release repo
      uses: actions/checkout@v4
      with:
        repository: onyx-hq/onyx-public-releases
        token: ${{ steps.app-token.outputs.token }}
    - name: Download release assets from GitHub
      uses: robinraju/release-downloader@v1
      with:
        preRelease: false
        tag: ${{ github.ref }}
        zipBall: false
        token: ${{ steps.app-token.outputs.token }}
        fileName: onyx-*
    - name: Get GitHub App User ID
      id: get-user-id
      run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
    - name: Tag the release
      run: |
        git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
        git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
        git tag -a ${{ github.ref }} -m "Release ${{ github.ref }}"
        git push origin ${{ github.ref }}
    - name: Public github release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        tag_name: ${{ github.ref }}
        repository: onyx-hq/onyx-public-releases
        files: |
          onyx-*
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
