name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: false
        default: ''
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - "docs/**"
env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "11.0"

defaults:
  run:
    shell: bash

jobs:
  changesets:
    uses: ./.github/workflows/changesets.yaml
  compile:
    concurrency:
      group: onyx-compile-${{ github.ref_name || inputs.tag }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Releasing binary version ${{ github.ref_name || inputs.tag }} for target ${{ matrix.job.target }}
    needs: [changesets]
    if: needs.changesets.outputs.onyx == 'true' || startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            cross-compilation: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross-compilation: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross-compilation: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name || inputs.tag }}

      #-- Build frontend
      - name: Install Node.js
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
            pnpm-store-${{ matrix.job.os }}-
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-
            turbo-${{ matrix.job.os }}-
      - name: Build web-app static assets
        run: |
          pnpm install
          pnpm -C web-app build

      #-- Build core binary
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-${{ matrix.job.os }}-${{ matrix.job.target }}
      - name: Install cross
        if: matrix.job.cross-compilation
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Cargo build
        shell: bash
        run: |
          if [[ "${{ matrix.job.cross-compilation }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi
          mkdir -p artifacts
          mv target/${{ matrix.job.target }}/release/onyx artifacts/onyx-${{ matrix.job.target }}

      #-- Build json schema
      - name: Generate config schema (once)
        if: ${{ matrix.job.os == 'ubuntu-latest' }}
        run: |
          cargo run --release --target ${{ matrix.job.target }} -- gen-config-schema
          mv json-schemas/*.json artifacts/

      #-- Build checksum
      - name: Create binary checksum
        run: shasum --algorithm 256 --binary onyx-${{ matrix.job.target }} | tee SHA256SUM-onyx-${{ matrix.job.target }}.txt
        working-directory: artifacts

      #-- Build python lib
      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: "pip"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.job.target }}
          args: --release --out dist
          sccache: 'true'
          # manylinux: auto
          container: off
          working-directory: onyx-py
      - name: Move wheels
        run: mv onyx-py/dist/* artifacts/

      - name: Copy changelog (once)
        if: ${{ matrix.job.os == 'ubuntu-latest' }}
        run: cp CHANGELOG.md artifacts/

      #-- Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.target }}
          path: |
            artifacts/**/*
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [compile]
    steps:
    - name: Download release assets from artifact
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
    - name: List all artifacts
      run: ls -R ./artifacts
    - name: Combine checksums
      run: cat artifacts/SHA256SUM-onyx-*.txt | tee artifacts/SHA256SUMS.txt
    - name: Ensure binaries are executable
      run: chmod +x artifacts/onyx-*
    - name: Upload files to github release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        tag_name: ${{ github.ref_name || inputs.tag }}
        files: |
          artifacts/**/*
