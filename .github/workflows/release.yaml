name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag or branch to release"
        required: true
        default: ""
      unique:
        description: "Unique identifier to append to the release tag/branch"
        required: false
        type: boolean
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - "docs/**"
env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "11.0"

defaults:
  run:
    shell: bash

jobs:
  build-tauri:
    concurrency:
      group: onyx-build-tauri-${{ inputs.tag || github.ref_name }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Build tauri version ${{ inputs.tag || github.ref_name }} for target ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref_name }}

      #-- Prep node
      - name: Prep Node
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
            pnpm-store-${{ matrix.job.os }}-
      - name: Install dependencies
        run: |
          pnpm install

      #-- Create common artifacts folder
      - name: Create artifacts folder
        run: mkdir -p artifacts

      #-- Prep rust
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-tauri-${{ matrix.job.os }}-${{ matrix.job.target }}
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      #-- Build tauri (and frontend)
      - name: install dependencies (ubuntu only)
        if: matrix.job.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      - name: Build tauri
        uses: tauri-apps/tauri-action@v0
        id: tauri-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target ${{ matrix.job.target }}
          projectPath: web-app
          appName: onyx
          appVersion: ${{ inputs.tag || github.ref_name }}
      - name: Move tauri assets to artifacts
        run: |
          mkdir -p artifacts/tauri-${{ matrix.job.target }}
          artifacts=$(echo '${{ steps.tauri-build.outputs.artifactPaths }}' | jq -r '.[]')
          for artifact in $artifacts; do
            mv $artifact artifacts/tauri-${{ matrix.job.target }}/
          done
      - name: Cleanup tauri build to reduce cache size
        run: rm -rf target/${{ matrix.job.target }}/release/bundle
      #-- Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.target }}
          path: |
            artifacts/**/*
          if-no-files-found: error
          retention-days: 1

  build-cli:
    concurrency:
      group: onyx-build-cli-${{ inputs.tag || github.ref_name }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Build CLI version ${{ inputs.tag || github.ref_name }} for target ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref_name }}

      #-- Prep node
      - name: Prep Node
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
            pnpm-store-${{ matrix.job.os }}-
      - name: Install dependencies & Build web-app
        run: |
          pnpm install
          pnpm -C web-app build

      #-- Create common artifacts folder
      - name: Create artifacts folder
        run: mkdir -p artifacts

      #-- Prep rust
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-cli-${{ matrix.job.os }}-${{ matrix.job.target }}
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      #-- Build onyx cli binary
      - name: Build onyx cli
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.job.target }} --locked
          mv target/${{ matrix.job.target }}/release/onyx artifacts/onyx-${{ matrix.job.target }}

      #-- Build json schema
      - name: Generate config schema (once)
        if: ${{ matrix.job.os == 'ubuntu-latest' }}
        run: |
          cargo run --release --target ${{ matrix.job.target }} -- gen-config-schema
          cp -a json-schemas/. artifacts/

      #-- Build checksum
      - name: Create binary checksum
        run: shasum --algorithm 256 --binary onyx-${{ matrix.job.target }} | tee SHA256SUM-onyx-${{ matrix.job.target }}.txt
        working-directory: artifacts

      #-- Build python lib
      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: "pip"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.job.target }}
          args: --release --out dist
          sccache: "true"
          # manylinux: auto
          container: off
          working-directory: onyx-py
      - name: Move wheels
        run: mv onyx-py/dist/* artifacts/

      - name: Copy changelog (once)
        if: ${{ matrix.job.os == 'ubuntu-latest' }}
        run: cp CHANGELOG.md artifacts/

      #-- Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.target }}
          path: |
            artifacts/**/*
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [build-tauri, build-cli]
    steps:
      - name: Download release assets from artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: List all artifacts
        run: ls -R ./artifacts
      - name: Combine checksums
        run: cat artifacts/SHA256SUM-onyx-*.txt | tee artifacts/SHA256SUMS.txt
      - name: Ensure binaries are executable
        run: chmod +x artifacts/onyx-*
      - name: Get current time
        id: time
        run: echo "current_time=$(date -u +'-%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      - name: Upload files to github release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ inputs.tag != '' }}
          tag_name: ${{ inputs.tag || github.ref_name }}${{ inputs.unique && steps.time.outputs.current_time || '' }}
          files: |
            artifacts/**/*

  announce:
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ github.event_name != 'workflow_dispatch' }}
    steps: # get release note from github and its version to send to slack channel
      - name: Get release note
        run: |
          touch RELEASE_NOTES
          gh release view ${{ inputs.tag || github.ref_name }} --json body --jq .body >> RELEASE_NOTES

      - name: Release notes formatting - Strip html comment from the beginning of release notes
        run: sed --in-place -e 's/<\!--[^>]*-->//g' RELEASE_NOTES && cat RELEASE_NOTES

      - name: Release notes formatting - Strip "full changelog" link
        run: sed --in-place -e 's/\*\*Full Changelog.*//g' RELEASE_NOTES && cat RELEASE_NOTES

      - name: Release notes formatting - Strip new contributor section
        run: |
          sed --in-place -E -e 's/## New Contributors.*//' RELEASE_NOTES
          sed --in-place -E -e 's/\* .+? made their first contribution .+?//' RELEASE_NOTES
          cat RELEASE_NOTES

      - name: Release notes formatting - Replace markdown bullets with a more slack-compatible format
        run: sed --in-place -E -e 's/\* (.+?) (by .+?) in (http.+?)/- <\3|\1> \2/' RELEASE_NOTES && cat RELEASE_NOTES

      - name: Release notes formatting - Replace headers with bold text
        run: sed --in-place -E -e 's/## (.*)/*\1*/' RELEASE_NOTES && cat RELEASE_NOTES

      - name: Ensure release body is JSON-friendly
        run: |
          jq --null-input '{"body": $releaseNotes}' --rawfile releaseNotes RELEASE_NOTES > RELEASE_NOTES_JSON && cat RELEASE_NOTES_JSON

      - name: Assign release notes to step variable
        id: release-notes-formatting
        run: echo "::set-output name=RELEASE_NOTES::$(cat RELEASE_NOTES_JSON | jq '.body')"

      - name: Announce to slack channel
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: "Release Notifier"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_MESSAGE: ${{ steps.release-notes-formatting.outputs.RELEASE_NOTES }}
          SLACK_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: "product-releases-dev"
          MSG_MINIMAL: ref,commit
          SLACK_FOOTER: "Public this release by running https://github.com/onyx-hq/onyx/actions/workflows/public-release.yaml"
          SLACK_LINK_NAMES: true
          SLACKIFY_MARKDOWN: true
          SLACK_TITLE: |
            :rocket: New release ${{ inputs.tag || github.ref_name }} of onyx is ready :rocket:
