name: Release
on:
  workflow_dispatch:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
  schedule:
  - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  changesets:
    uses: ./.github/workflows/changesets.yaml
  compile:
    concurrency:
      group: onyx-compile-${{ github.ref_name }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Releasing binary version ${{ github.ref_name }} for ${{ matrix.job.os }}, target ${{ matrix.job.target }}
    needs: [changesets]
    if: needs.changesets.outputs.onyx == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    #TODO: use third party runners to support building arm binaries natively
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
        # - os: macos-latest
        #   target: universal2-apple-darwin
        #   cross-compilation: false
        #   glibc-version: ""
        - os: ubuntu-20.04
          target: x86_64-unknown-linux-gnu
          cross-compilation: false
          glibc-version: ".2.31" # to stay compatible with ubuntu 20.04
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
        #   cross-compilation: false
        # - os: ubuntu-latest
        #   target: x86_64-unknown-linux-musl
        #   cross-compilation: true
        # - os: ubuntu-latest
        #   target: i686-unknown-linux-gnu
        #   cross-compilation: true
        # - os: ubuntu-latest
        #   target: arm-unknown-linux-gnueabihf
        #   cross-compilation: true
        # - os: ubuntu-latest
        #   target: aarch64-unknown-linux-gnu
        #   cross-compilation: true
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Prep Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        rustflags: ""   # temporarily override "-D warnings"
        target: ${{ matrix.job.os == 'macos-latest' && 'x86_64-apple-darwin,aarch64-apple-darwin' || matrix.job.target }}
        cache-key: release-${{ matrix.job.os }}-${{ matrix.job.target }}
    - name: Update Rust Toolchain Target
      run: |
        echo "targets = ['${{matrix.job.target}}']" >> rust-toolchain.toml
    - name: Install cross
      if: matrix.job.cross-compilation
      uses: taiki-e/install-action@v2
      with:
        tool: cross
    - name: Install Node.js
      uses: actions/setup-node@v4
      id: setup-node
      with:
        node-version: 20
    - uses: pnpm/action-setup@v4
      with:
        run_install: true
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
          pnpm-store-
    - name: Cache turbo build setup
      uses: actions/cache@v4
      with:
        path: .turbo
        key: turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ github.sha }}
        restore-keys: |
          turbo-${{ matrix.job.os }}-${{ matrix.job.target }}-
          turbo-
    - name: Build
      shell: bash
      run: |
        pnpm -C web-app build
    - name: Install required dependencies
      shell: bash
      run: |
        if [[ "${{ matrix.job.os }}" =~ "ubuntu" ]]; then
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        fi
    # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: mlugg/setup-zig@v1
    - name: Setup cargo zigbuild
      shell: bash
      run: |
        cargo install --locked cargo-zigbuild
    - name: Cargo build
      env:
        MACOSX_DEPLOYMENT_TARGET: 14.0
      shell: bash
      run: |
        if [[ "${{ matrix.job.cross-compilation }}" == "true" ]]; then
          cross build --release --target ${{ matrix.job.target }}
        else
          cargo build --release --target ${{ matrix.job.target }}
        fi
        mv target/${{ matrix.job.target }}/release/onyx onyx-${{ matrix.job.target }}
    - name: Generate release tag
      id: tag
      run: |
        if [[ "${{ github.ref }}" =~ "refs/tags/" ]]; then
          echo "::set-output name=release_tag::${{ github.ref_name }}"
        else
          echo "::set-output name=release_tag::NightlyBuild_$(date +"%Y.%m.%d.run_${{ github.run_number }}")"
        fi
    - name: Private github release
      uses: softprops/action-gh-release@v2
      with:
        draft: ${{ startsWith(github.ref, 'refs/tags/') }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: |
          onyx-${{ matrix.job.target }}
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
