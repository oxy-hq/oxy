name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag or branch to release"
        required: true
        default: ""
      unique:
        description: "Unique identifier to append to the release tag/branch"
        required: false
        type: boolean
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - "docs/**"
env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "11.0"

defaults:
  run:
    shell: bash

permissions:
  contents: write
  actions: read

jobs:
  build-tauri:
    concurrency:
      group: onyx-build-tauri-${{ inputs.tag || github.ref_name }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Build tauri version ${{ inputs.tag || github.ref_name }} for target ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref_name }}

      #-- Prep node
      - name: Prep Node
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
      - name: Install dependencies
        run: |
          pnpm install

      #-- Create common artifacts folder
      - name: Create artifacts folder
        run: mkdir -p artifacts

      #-- Prep rust
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-tauri-${{ matrix.job.os }}-${{ matrix.job.target }}
          cache-all-crates: "true"
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      #-- Build tauri
      # - name: (ubuntu) Install dependencies
      #   if: startsWith(matrix.job.os, 'ubuntu')
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libwebkit2gtk-4.1-dev \
      #       build-essential \
      #       curl \
      #       wget \
      #       file \
      #       libxdo-dev \
      #       libssl-dev \
      #       libayatana-appindicator3-dev \
      #       librsvg2-dev

      # - name: (mac) Import Apple Developer Certificate
      #   if: startsWith(matrix.job.os, 'macos')
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      #     security set-keychain-settings -t 3600 -u build.keychain
      #     security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
      #     security find-identity -v -p codesigning build.keychain
      # - name: (mac) Verify Certificate
      #   if: startsWith(matrix.job.os, 'macos')
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development")
      #     CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
      #     echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
      #     echo "Certificate imported."

      - name: Build tauri
        uses: tauri-apps/tauri-action@v0
        id: tauri-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          args: --target ${{ matrix.job.target }}
          projectPath: crates/onyx-desktop

      - name: Move tauri assets to artifacts
        run: |
          mkdir -p artifacts/tauri-${{ matrix.job.target }}
          artifacts=$(echo '${{ steps.tauri-build.outputs.artifactPaths }}' | jq -r '.[]')
          for artifact in $artifacts; do
            if [[ $artifact == *.app ]]; then
              # github does not support Macos App bundle as artifact
              ditto -c -k --sequesterRsrc --keepParent "$artifact" "artifacts/tauri-${{ matrix.job.target }}/$(basename "$artifact" .app)-app-${{ matrix.job.target }}.zip"
            else
              base_name=$(basename "$artifact")
              new_name=$(echo "$base_name" | sed -E 's/_[0-9]+\.[0-9]+\.[0-9]+//') # remove version number from artifact name
              mv "$artifact" "artifacts/tauri-${{ matrix.job.target }}/$new_name"
            fi
          done
      - name: Cleanup tauri build to reduce cache size
        run: rm -rf target/${{ matrix.job.target }}/release/bundle
      #-- Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.job.target }}
          path: |
            artifacts/**/*
          if-no-files-found: error
          retention-days: 1

  build-cli:
    concurrency:
      group: onyx-build-cli-${{ inputs.tag || github.ref_name }}-${{ matrix.job.os }}-${{ matrix.job.target }}
      cancel-in-progress: true
    name: Build CLI version ${{ inputs.tag || github.ref_name }} for target ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref_name }}

      #-- Prep node
      - name: Prep Node
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.job.os }}-${{ matrix.job.target }}
      - name: Install dependencies & Build web-app
        run: |
          pnpm install
          pnpm -C web-app build

      #-- Create common artifacts folder
      - name: Create artifacts folder
        run: mkdir -p artifacts

      #-- Prep rust
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-cli-${{ matrix.job.os }}-${{ matrix.job.target }}
          cache-all-crates: "true"
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      #-- Build onyx cli binary
      - name: Build onyx cli
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.job.target }}
          mv target/${{ matrix.job.target }}/release/onyx artifacts/onyx-${{ matrix.job.target }}

      #-- Build json schema
      - name: Generate config schema (once)
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          cargo run --release --target ${{ matrix.job.target }} -- gen-config-schema
          cp -a json-schemas/. artifacts/
          cp Cargo.lock artifacts/

      #-- Build checksum
      - name: Create binary checksum
        run: shasum --algorithm 256 --binary onyx-${{ matrix.job.target }} | tee SHA256SUM-onyx-${{ matrix.job.target }}.txt
        working-directory: artifacts

      #-- Build python lib
      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: "pip"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.job.target }}
          args: --release --out dist
          sccache: "true"
          # manylinux: auto
          container: off
          working-directory: crates/onyx-py
      - name: Move wheels
        run: mv crates/onyx-py/dist/* artifacts/

      - name: Copy changelog (once)
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: cp crates/onyx-core/CHANGELOG.md artifacts/

      #-- Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.job.target }}
          path: |
            artifacts/**/*
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [build-tauri, build-cli]
    steps:
      - name: Download release assets from artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: List all artifacts
        run: ls -R ./artifacts
      - name: Combine checksums
        run: cat artifacts/SHA256SUM-onyx-*.txt | tee artifacts/SHA256SUMS.txt
      - name: Ensure binaries are executable
        run: chmod +x artifacts/onyx-*
      - name: Get current time
        id: time
        run: echo "current_time=$(date -u +'-%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      - name: Upload files to github release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ inputs.tag != '' }}
          tag_name: ${{ inputs.tag || github.ref_name }}${{ inputs.unique && steps.time.outputs.current_time || '' }}
          files: |
            artifacts/**/*
