name: Public Release
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'private version to release'
        required: true
        default: latest

defaults:
  run:
    shell: bash

jobs:
  public-release:
    runs-on: ubuntu-latest
    steps:
      - name: Declare release tag
        env:
          GH_TOKEN: ${{ github.token }}
        id: declare-release-tag
        run: |
          if [ "${{ inputs.ref }}" = "latest" ]; then
            echo "no ref provided, finding latest tag"
            latest_tag=$(gh api "/repos/${{ github.repository }}/releases/latest" --jq .tag_name)
            echo "release_tag=${latest_tag}" >> $GITHUB_OUTPUT
          else
            echo "release_tag=${{ inputs.ref }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions/create-github-app-token@v1
        name: Create GitHub App Token
        id: app-token
        with:
          app-id: ${{ vars.ARGO_APP_ID }}
          private-key: ${{ secrets.ARGO_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            onyx-public-releases
            onyx
      - name: Checkout Public Release repo
        uses: actions/checkout@v4
        with:
          repository: onyx-hq/onyx-public-releases
          token: ${{ steps.app-token.outputs.token }}
      - name: Download release assets from GitHub
        uses: robinraju/release-downloader@v1
        with:
          preRelease: false
          tag: ${{ steps.declare-release-tag.outputs.release_tag }}
          zipBall: false
          token: ${{ steps.app-token.outputs.token }}
          fileName: "*"
          extract: false
          out-file-path: release-assets
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Tag the release
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
          git tag -a ${{ steps.declare-release-tag.outputs.release-tag }} }} -m "Release ${{ steps.declare-release-tag.outputs.release-tag }} }}"
          git push --force origin ${{ steps.declare-release-tag.outputs.release-tag }} }}
      - name: Public github release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ steps.declare-release-tag.outputs.release-tag }}
          repository: onyx-hq/onyx-public-releases
          files: |
            release-assets/*
          body_path: release-assets/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Upload json schemas
        run: |
          mv release-assets/*.json json-schemas/
          if [ -n "$(git status json-schemas/*.json --porcelain)" ]; then
            git add json-schemas/*.json
            git commit -m "chore: update json schemas"
            git push origin HEAD
          else
            echo "No changes to commit"
          fi
