name: CI check

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
    paths-ignore:
      - 'docs/**'
  schedule:
    - cron: '0 0 * * 0'

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  changesets:
    if: ${{ !startsWith(github.head_ref, 'release-please--') || github.event_name == 'schedule' }}
    uses: ./.github/workflows/changesets.yaml

  typos:
    name: Typos
    if: github.event.pull_request.draft != true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check typos
        uses: crate-ci/typos@master

  links:
    name: Links
    if: github.event.pull_request.draft != true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-
      - name: Check broken links
        uses: lycheeverse/lychee-action@v2
        with:
          args: --root-dir ${{ github.workspace }} -v --exclude-path CHANGELOG.md --format detailed --cache --max-cache-age 1d .
          fail: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Save lychee cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .lycheecache
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  fmt:
    name: Onyx fmt
    needs: [changesets]
    if: needs.changesets.outputs.onyx == 'true' && github.event.pull_request.draft != true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: debug-ubuntu-latest-x86_64-unknown-linux-gnu
      - name: Install required dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Node.js
        uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Run lint-staged
        shell: bash
        run: |
          pnpm lint-staged --diff="origin/${{ github.base_ref }}...origin/${{ github.head_ref }}"

  check:
    needs: [fmt, changesets, links, typos]
    name: Onyx check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: debug-ubuntu-latest-x86_64-unknown-linux-gnu
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run cargo check
        run: cargo check --verbose --locked
      - name: Run cargo clippy
        run: cargo clippy --verbose --locked

  test:
    needs: [check]
    name: Onyx test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: debug-ubuntu-latest-x86_64-unknown-linux-gnu
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run cargo test
        env:
          RUST_BACKTRACE: 1
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BIGQUERY_SAMPLE_KEY: ${{ secrets.BIGQUERY_SAMPLE_KEY }}
        run: |
          touch examples/bigquery-sample.key
          echo $BIGQUERY_SAMPLE_KEY > examples/bigquery-sample.key
          cargo test --verbose --locked --no-fail-fast -- --nocapture
      - name: Check json schemas
        run: cargo run -- gen-config-schema --check