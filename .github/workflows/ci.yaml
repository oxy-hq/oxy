name: CI check

on:
  pull_request:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
    paths-ignore:
      - "docs/**"
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - main
      - trigger-ci-workflow
    paths-ignore:
      - "docs/**"

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  changesets:
    if: ${{ github.event_name != 'pull_request' || (!startsWith(github.head_ref, 'release-please--') && !github.event.pull_request.draft) }}
    uses: ./.github/workflows/changesets.yaml
    name: Changesets

  typos:
    name: Typos
    if: github.event.pull_request.draft != true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Check typos
        uses: crate-ci/typos@v1.36.2

  fmt-web:
    name: Format web
    needs: [changesets, typos]
    concurrency:
      group: fmt-web-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    if: needs.changesets.outputs.web-app == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v5
        id: setup-node
        with:
          node-version: lts/*
          cache: 'pnpm'
      - name: Run pnpm install
        run: pnpm install --prefer-frozen-lockfile
      - name: Run lint-staged
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pnpm lint-staged --diff="origin/${{ github.base_ref }}...origin/${{ github.head_ref }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            pnpm lint-staged --diff="${{ github.event.before }}...${{ github.event.after }}"
          fi

  build-web:
    name: Build web
    needs: [changesets, typos]
    concurrency:
      group: build-web-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    if: needs.changesets.outputs.web-app == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v5
        id: setup-node
        with:
          node-version: lts/*
          cache: 'pnpm'
      - name: Restore Vite pre-bundle cache
        uses: actions/cache@v4
        with:
          path: web-app/node_modules/.vite
          key: vite-prebundle-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('web-app/vite.config.*', 'web-app/src/**') }}
          restore-keys: |
            vite-prebundle-
      - name: Install dependencies & Build web-app
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: |
          pnpm install --prefer-frozen-lockfile
          pnpm -C web-app build
      - name: Save Vite pre-bundle cache
        if: always()
        uses: actions/cache@v4
        with:
          path: web-app/node_modules/.vite
          key: vite-prebundle-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('web-app/vite.config.*', 'web-app/src/**') }}

  cargo-check-and-test:
    concurrency:
      group: cargo-check-and-test-${{ matrix.task }}-${{ matrix.db }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    needs: [changesets, typos]
    if: needs.changesets.outputs.oxy == 'true'
    name: Format cargo, check & test (${{ matrix.task }}, ${{ matrix.db }})
    runs-on: ${{ github.repository == 'oxy-hq/oxy-internal' && 'warp-ubuntu-latest-arm64-2x' || 'ubuntu-latest' }}
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      BIGQUERY_SAMPLE_KEY: ${{ secrets.BIGQUERY_SAMPLE_KEY }}
      GEMINI_API_KEY: "empty"
      ANTHROPIC_API_KEY: "empty"
    strategy:
      fail-fast: true
      matrix:
        task: [check, test]
        db: [sqlite, postgres]
        exclude:
          # Only run check once (with sqlite)
          - task: check
            db: postgres
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: default
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U admin -d default"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          theme: dark
          metric_frequency: 3
          comment_on_pr: false
      - uses: rui314/setup-mold@v1
        if: runner.os == 'Linux'
        with:
          make-default: true

      - name: Prep Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Prep cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.task }}
      # protobuf is required by lance https://github.com/lancedb/lance/issues/3073
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install PostgreSQL client
        if: matrix.db == 'postgres'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Wait for Postgres
        if: matrix.db == 'postgres'
        run: |
          until pg_isready -h localhost -p 5432 -U admin; do
            echo "Waiting for Postgres..."
            sleep 2
          done
          echo "Postgres is ready!"
        env:
          PGPASSWORD: password
      - name: Run task
        run: |
          if [[ "${{ matrix.task }}" == "check" ]]; then
            cargo clippy --profile ci --verbose --workspace --fix
          elif [[ "${{ matrix.task }}" == "test" ]]; then
            touch examples/bigquery-sample.key
            echo $BIGQUERY_SAMPLE_KEY > examples/bigquery-sample.key

            # Set database URL based on matrix
            if [[ "${{ matrix.db }}" == "postgres" ]]; then
              export OXY_DATABASE_URL="postgresql://admin:password@localhost:5432/default"
              echo "Using Postgres database: $OXY_DATABASE_URL"
              # Run migrations using the migration crate
              cargo run --profile ci -- migrate
            else
              # Default to SQLite (no URL needed or use file-based SQLite)
              unset OXY_DATABASE_URL
              echo "Using SQLite database (default)"
              # Run migrations for SQLite
              cargo run --profile ci -- migrate
            fi

            cargo test --profile ci --verbose --no-fail-fast -- --nocapture
            cargo run --profile ci -- gen-config-schema --check
          fi
