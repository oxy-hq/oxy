name: Prepare Release
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
    paths-ignore:
      - "docs/**"
permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  release-private:
    concurrency:
      group: prepare-release-${{ github.ref_name }}
      cancel-in-progress: false
    name: Release-please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release-please.outputs['crates/onyx-core--release_created'] }}
      release_version: ${{ steps.release-please.outputs['crates/onyx-core--major'] }}.${{ steps.release-please.outputs['crates/onyx-core--minor'] }}.${{ steps.release-please.outputs['crates/onyx-core--patch'] }}
    steps:
      - uses: actions/create-github-app-token@v1
        name: Create GitHub App Token
        id: app-token
        with:
          app-id: ${{ vars.ARGO_APP_ID }}
          private-key: ${{ secrets.ARGO_APP_PRIVATE_KEY }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      # use release-please until https://github.com/release-plz/release-plz/issues/1144 is closed
      - name: Run release-please
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          target-branch: ${{ github.ref_name }}

  release-public:
    needs: [release-private]
    if: needs.release-private.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        name: Create GitHub App Token
        id: app-token
        with:
          app-id: ${{ vars.ARGO_APP_ID }}
          private-key: ${{ secrets.ARGO_APP_PRIVATE_KEY }}
          repositories: |
            onyx-internal
            onyx
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Wait for publishing oss code to succeed
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "move-code"
          repo-token: ${{ steps.app-token.outputs.token }}
          wait-interval: 20
      - name: Checkout oss repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: onyx-hq/onyx
          ref: ${{ github.ref_name }}
          token: ${{ steps.app-token.outputs.token }}
      - name: Tag the release
        run: |
          git config --global user.name "${{ steps.app-token.outputs.app-slug }}[bot]"
          git config --global user.email "${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com"
          git tag ${{ needs.release-private.outputs.release_version }}
          git push origin ${{ needs.release-private.outputs.release_version }}
