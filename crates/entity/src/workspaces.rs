//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "workspaces")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::workspace_users::Entity")]
    WorkspaceUsers,
    #[sea_orm(has_many = "super::projects::Entity")]
    Projects,
}

impl Related<super::workspace_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkspaceUsers.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::workspace_users::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::workspace_users::Relation::Workspaces.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
