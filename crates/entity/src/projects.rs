//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::N(20))")]
pub enum ProjectProvider {
    #[sea_orm(string_value = "github")]
    Github,
    #[sea_orm(string_value = "gitlab")]
    Gitlab,
    #[sea_orm(string_value = "bitbucket")]
    Bitbucket,
}

impl ProjectProvider {
    pub fn as_str(&self) -> &'static str {
        match self {
            ProjectProvider::Github => "github",
            ProjectProvider::Gitlab => "gitlab",
            ProjectProvider::Bitbucket => "bitbucket",
        }
    }

    pub fn from_str(s: &str) -> Result<Self, String> {
        match s {
            "github" => Ok(ProjectProvider::Github),
            "gitlab" => Ok(ProjectProvider::Gitlab),
            "bitbucket" => Ok(ProjectProvider::Bitbucket),
            _ => Err(format!("Invalid project provider: {s}")),
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "projects")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub organization_id: Uuid,
    pub repo_id: Option<String>,
    pub token: Option<String>,
    pub provider: Option<String>,
    pub active_branch_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organizations,
    #[sea_orm(has_many = "super::branches::Entity")]
    Branches,
    #[sea_orm(has_many = "super::runs::Entity")]
    Runs,
    #[sea_orm(has_many = "super::secrets::Entity")]
    Secrets,
    #[sea_orm(has_many = "super::threads::Entity")]
    Threads,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::branches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Branches.def()
    }
}

impl Related<super::runs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Runs.def()
    }
}

impl Related<super::secrets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Secrets.def()
    }
}

impl Related<super::threads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Threads.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
