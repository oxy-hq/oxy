//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::N(10))")]
pub enum UserStatus {
    #[sea_orm(string_value = "active")]
    Active,
    #[sea_orm(string_value = "deleted")]
    Deleted,
}

impl UserStatus {
    pub fn as_str(&self) -> &'static str {
        match self {
            UserStatus::Active => "active",
            UserStatus::Deleted => "deleted",
        }
    }

    pub fn from_str(s: &str) -> Result<Self, String> {
        match s {
            "active" => Ok(UserStatus::Active),
            "deleted" => Ok(UserStatus::Deleted),
            _ => Err(format!("Invalid status: {s}")),
        }
    }
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::N(10))")]
pub enum UserRole {
    #[sea_orm(string_value = "member")]
    Member,
    #[sea_orm(string_value = "admin")]
    Admin,
}

impl UserRole {
    pub fn as_str(&self) -> &'static str {
        match self {
            UserRole::Member => "member",
            UserRole::Admin => "admin",
        }
    }

    pub fn from_str(s: &str) -> Result<Self, String> {
        match s {
            "member" => Ok(UserRole::Member),
            "admin" => Ok(UserRole::Admin),
            _ => Err(format!("Invalid role: {s}")),
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub name: String,
    pub picture: Option<String>,
    pub password_hash: Option<String>,
    pub email_verified: bool,
    pub email_verification_token: Option<String>,
    pub role: UserRole,
    pub status: UserStatus,
    pub created_at: DateTimeWithTimeZone,
    pub last_login_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::api_keys::Entity")]
    ApiKeys,
    #[sea_orm(has_many = "super::logs::Entity")]
    Logs,
    #[sea_orm(has_many = "super::workspace_users::Entity")]
    WorkspaceUsers,
    #[sea_orm(has_many = "super::secrets::Entity")]
    Secrets,
    #[sea_orm(has_many = "super::threads::Entity")]
    Threads,
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeys.def()
    }
}

impl Related<super::logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Logs.def()
    }
}

impl Related<super::workspace_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkspaceUsers.def()
    }
}

impl Related<super::secrets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Secrets.def()
    }
}

impl Related<super::threads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Threads.def()
    }
}

impl Related<super::workspaces::Entity> for Entity {
    fn to() -> RelationDef {
        super::workspace_users::Relation::Workspaces.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::workspace_users::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
