# Cline (Previously Claude Dev) Instructions for Oxy

You are assisting with the development of Oxy, an open-source framework for building agentic analytics systems.

## Project Quick Reference

- **Backend**: Rust 2024 (Axum, SeaORM, Tokio, DuckDB, LanceDB)
- **Frontend**: React 19 + TypeScript + Vite + Tailwind CSS 4
- **Monorepo**: pnpm workspaces with Turbo
- **Database**: SeaORM (SQLite dev, PostgreSQL prod)

## Critical Rules

1. **No .unwrap() or .expect() in production Rust code** - Always use proper error handling with `Result` and `?`
2. **No TypeScript 'any' type** - Use proper types or `unknown` with type guards
3. **Use SeaORM for database** - Never write raw SQL, use the ORM
4. **Conventional Commits** - Format: `type(scope): description`
5. **Test all changes** - Write tests for new features and bug fixes
6. **Document public APIs** - Use rustdoc (///) and JSDoc (/\*\*) comments

## File Structure

```
crates/
├── core/          # Main framework logic
├── entity/        # Database entities
├── migration/     # Database migrations
├── semantic/      # Semantic system
├── omni/          # Omni integration
└── py/            # Python bindings

web-app/           # React frontend
examples/          # YAML agents/workflows
docs/              # Documentation
```

## Common Commands

```bash
# Development
pnpm dev                          # Frontend dev server
cargo run -- serve                # Backend API server

# Testing
cargo test --workspace            # All Rust tests
cargo clippy --all-targets        # Rust linting
pnpm test                         # Frontend tests

# Database
cargo run -p migration -- up      # Run migrations
cargo run -- seed users           # Seed test data

# Formatting
cargo fmt --all                   # Format Rust
pnpm format                       # Format TypeScript
```

## Code Patterns

### Rust Error Handling
```rust
fn fetch_user(id: UserId) -> Result<User, OxyError> {
    let conn = get_db_connection()?;
    let user = User::find_by_id(id)
        .one(&conn)
        .await
        .map_err(|e| OxyError::DatabaseError(e.to_string()))?
        .ok_or(OxyError::UserNotFound(id))?;
    Ok(user)
}
```

### TypeScript Component
```typescript
interface Props {
  agentId: string;
  onExecute: (id: string) => void;
}

export function AgentCard({ agentId, onExecute }: Props) {
  const { status, loading } = useAgentStatus(agentId);

  const handleClick = useCallback(() => {
    onExecute(agentId);
  }, [agentId, onExecute]);

  return <div onClick={handleClick}>{status}</div>;
}
```

## Project Resources

- **Docs**: https://docs.oxy.tech
- **DeepWiki**: https://deepwiki.com/oxy-hq/oxy
- **GitHub**: https://github.com/oxy-hq/oxy

## Task Workflow

When working on tasks:
1. Read existing code to understand patterns
2. Write tests for new functionality
3. Implement with proper error handling
4. Run tests and linting
5. Format code before committing
6. Use conventional commit messages